# -*- coding: utf-8 -*-
"""Clustering income spend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_04IKGz9otqKZ3f2jDUBK6Tm4f82w9ke

Clustering using income spent
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""load dataset"""

from google.colab import files
upload = files.upload()

"""import dataset"""

dataset = pd.read_csv('dataset.csv')

"""summarize dataset"""

print (dataset.shape)
print (dataset.describe)
print (dataset.head(5))

"""'''### Segregate & Zipping Dataset'''You’re turning two columns of data — one for income, one for spending — into a list of pairs like this:
[(income1, spend1), (income2, spend2), ...]

This format is useful for things like plotting data on a graph or feeding it into a machine learning model.

It pairs each value from the Income list with the matching value in the Spend list.
(So, if person 1 has income = 5000 and spend = 3000, it becomes one pair: (5000, 3000), and so on.)

zip() makes these pairs.

list() turns those pairs into a list of all the (income, spend) pairs.

np.array() changes that list into a special format (called a NumPy array) that's good for maths or machine learning work.

All of this is stored in a new variable X
"""

Income = dataset['INCOME'].values
Spend = dataset['SPEND'].values
X = np.array(list (zip(Income,Spend)))
X

"""'''### Finding the Optimized K Value'''"""

from sklearn.cluster import KMeans
WCSS = []
for i in range(1,11):
  km=KMeans(n_clusters=i, random_state=0)
  km.fit(X)
  WCSS.append(km.inertia_)
plt.plot(range(1,11),WCSS,color ="red",marker = "8")
plt.title('optimal k value')
plt.xlabel('number of clusters')
plt.ylabel('wcss')
plt.show()

"""'''### Fitting the k-means to the dataset with k=4'''"""

model=KMeans(n_clusters = 4, random_state = 0)
y_means = model.fit_predict (X)

"""'''### Visualizing the clusters for k=4

Cluster 1: Customers with medium income and low spend

Cluster 2: Customers with high income and medium to high spend

Cluster 3: Customers with low income

Cluster 4: Customers with medium income but high spend
'''
"We are going to show the result of dividing customers into 4 groups based on their income and spending." This code draws a colorful chart that:

Groups customers based on income & spending patterns.

Uses different colors to show each group.

Shows the "center" of each group with a red square.

Helps businesses or analysts understand customer behavior patterns at a glance.
"""

plt.scatter(X[y_means==0,0],X[y_means==0,1],s=50, c='brown',label='1')
plt.scatter(X[y_means==1,0],X[y_means==1,1],s=50, c='blue',label='2')
plt.scatter(X[y_means==2,0],X[y_means==2,1],s=50, c='green',label='3')
plt.scatter(X[y_means==3,0],X[y_means==3,1],s=50, c='cyan',label='4')
plt.scatter(model.cluster_centers_[:,0], model.cluster_centers_[:,1],s=100,marker='s', c='red', label='Centroids')
plt.title('Income Spent Analysis')
plt.xlabel('Income')
plt.ylabel('Spent')
plt.legend()
plt.show()